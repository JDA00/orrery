plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group 'com.jda'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

application {
    mainModule = 'com.jda.orrery'
    mainClass = 'com.jda.orrery.OrreryApp'
}

javafx {
    version = '11'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation "org.openjfx:javafx-controls:11"
    implementation "org.openjfx:javafx-fxml:11"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.10.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.10.2"
}

test {
    useJUnitPlatform()
}

tasks.named('run').configure {
    doFirst {
        jvmArgs += [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml',

                // Mac integrated graphics settings (Intel Iris Plus)
                "-Dprism.order=es2,sw",          // ES2 with software fallback
                "-Dprism.verbose=true",          // Keep verbose for debugging
                "-Djavafx.animation.pulse=60",   // Standard 60 FPS
                "-Dprism.vsync=true"             // Enable vsync for smooth rendering

                // High-end GPU settings (NVIDIA 3090)
                // Uncomment these lines when using the machine with 3090:
                // "-Dprism.order=es2",
                // "-Dprism.verbose=true",
                // "-Dprism.forceGPU=true",
                // "-Djavafx.animation.fullspeed=true",
                // "-Dprism.vsync=true",
                // "-Dprism.targetvram=2",           // Allow full GPU VRAM allocation
                // "-Dprism.maxvram=12G",            // Use up to 12GB of VRAM
                // "-Dprism.dirtyopts=false",        // Prevent excessive optimisations
                // "-Djavafx.animation.pulse=7"      // ~144 FPS (7ms per frame)
        ]

        // Platform-specific settings
        if (System.getProperty("os.name").toLowerCase().contains("linux")) {
            environment "GDK_BACKEND", "x11"  // Ensures JavaFX runs correctly on Linux
        }

        classpath = files() // Clear the default classpath since this is modular
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}